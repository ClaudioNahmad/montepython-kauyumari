#------Experiments to test (separated with commas)-----
# To see all the available ones, please look in the
# montepython/likelihoods folder. Every folder there is a valid likelihood to
# test.

data.experiments=['JLA','bao_boss']
#data.experiments=['bao','cosmic_clocks_BC03_all']
#data.experiments=['Planck_highl','Planck_lowl','Planck_lensing']
#data.experiments=['wmap','spt']
	
#------ Parameter list -------
# data.parameters[class name] = [mean, min, max, 1-sigma, scale, role]
# - if min max irrelevant, put to -1 or None (if you want a boundary of -1, use -1.0)
# - if fixed, put 1-sigma to 0
# - if scale irrelevant, put to 1, otherwise to the appropriate factor
# - role is either 'cosmo', 'nuisance' or 'derived'


# Cosmological parameters list
data.parameters['omega_b'] 	   = [2.2253, None, None, 0.028, 0.01,'cosmo']
data.parameters['omega_cdm'] 	   = [0.1120, None, None,0.0016, 1,   'cosmo']
#data.parameters['100*theta_s']    = [1.0418, None, None,  3e-4, 1,   'cosmo']
data.parameters['n_s']       	   = [0.963,    -1,   -1, 0.004, 1,   'cosmo']
data.parameters['ln10^{10}A_s']    = [3.0753, None, None,0.0029, 1,   'cosmo']
data.parameters['tau_reio']    	   = [0.085,    -1,   -1,0.0044, 1,   'cosmo']
data.parameters['T_cmb']	   = [2.0,	 None,None,0.015,1,   'cosmo']
data.parameters['h']         	   = [0.703,    -1,   -1,0.0065, 1,   'cosmo']

# Equation of State variation
#older (for reference)
#data.parameters['w0_fld']    	   = [-0.878, -1.0,-0.1,  0,1,  1,   'cosmo']
#data.parameters['wa_fld']    	   = [-0.894, -1.0,-0.1,  0,1,  1,   'cosmo']
data.parameters['b0_fld'] 	   = [-93,   -120,   100, 0.05,  0.01,   'cosmo']
data.parameters['b1_fld'] 	   = [-33.7, -100, -0.01, 0.05,  0.01,   'cosmo']
#data.parameters['Omega_fld'] 	   = [0.6  ,  0.0,   1.0, 0.05,     1,   'cosmo']

# Nuisance (JLA)
data.parameters['alpha']   	   = [0.15 ,  None, None, 0.001, 1, 'nuisance']
data.parameters['beta']    	   = [3.559,  None, None, 0.02,  1, 'nuisance']
data.parameters['M']       	   = [-19.02, None, None, 0.004,  1, 'nuisance']
data.parameters['Delta_M'] 	   = [-0.10,  None, None, 0.004,  1, 'nuisance']

# Derived parameters
#data.parameters['Omega_m']	   = [0, None, None, 0,     1,  'derived']
#data.parameters['z_reio']         = [1,   -1,   -1, 0,     1,  'derived']
#data.parameters['YHe']            = [1, None, None, 0,     1,  'derived']
data.parameters['H0']              = [1, None, None, 0,     1,  'derived']
#data.parameters['A_s']            = [0, None, None, 0,  1e-9,  'derived']
#data.parameters['sigma8']         = [0, None, None, 0,     1,  'derived']
#data.parameters['Omega_Lambda']   = [0,   -1,   -1, 0,     1,  'derived']



# These two are required to get sigma8 as a derived parameter 
# (class must compute the P(k) until sufficient k)
#data.cosmo_arguments['output'] = 'mPk'
#data.cosmo_arguments['P_k_max_h/Mpc'] = 1.

# CLASS arguments
#aqui no sé si Omega_fld se refiere a la densidad -física- (omega_x*h^2) o al parámetro de densidad
data.cosmo_arguments['Omega0_fld']  =  0.6911
data.cosmo_arguments['use_ppf']    =  'yes'
#data.cosmo_arguments['cs2_fld']   =  1
#data.cosmo_arguments['c_gamma_over_c_fld']  = 0.4 
#data.cosmo_arguments['output'] = 'mPk,tCl'
#data.cosmo_arguments['sBBN file'] = data.path['cosmo']+'/bbn/sBBN.dat'

#------ Mcmc parameters ----
# Number of steps taken, by default (overwritten by the -N command)
data.N=100
# Number of accepted steps before writing to file the chain. Larger means less
# access to disc, but this is not so much time consuming.
data.write_step=5
